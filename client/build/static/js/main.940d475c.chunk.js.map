{"version":3,"sources":["assets/spinner.gif","utils/reducers.js","utils/actions.js","utils/GlobalState.js","utils/helpers.js","components/ProductItem/index.js","utils/queries.js","components/ProductList/index.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/OrderHistory.js","pages/success.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","console","log","useStoreContext","useContext","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","onsuccess","transaction","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","item","image","name","price","quantity","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","parseInt","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","forEach","then","category","key","spinner","CategoryMenu","categoryData","id","CartItem","placeholder","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","Success","addOrder","setTimeout","saveOrder","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.940d475c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","import {\r\n  UPDATE_PRODUCTS,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  ADD_TO_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from \"./actions.js\";\r\n\r\nimport { useReducer } from \"react\";\r\n\r\nexport const reducer = (state, action) => {\r\n  switch (action.type) {\r\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\r\n    case UPDATE_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        products: [...action.products],\r\n      };\r\n\r\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated products array\r\n    case UPDATE_CATEGORIES:\r\n      return {\r\n        ...state,\r\n        categories: [...action.categories],\r\n      };\r\n\r\n    case UPDATE_CURRENT_CATEGORY:\r\n      return {\r\n        ...state,\r\n        currentCategory: action.currentCategory,\r\n      };\r\n\r\n    case ADD_TO_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: [...state.cart, action.product],\r\n      };\r\n\r\n    case ADD_MULTIPLE_TO_CART:\r\n      return {\r\n        ...state,\r\n        cart: [...state.cart, ...action.products],\r\n      };\r\n\r\n    case REMOVE_FROM_CART:\r\n      let newState = state.cart.filter((product) => {\r\n        return product._id !== action._id;\r\n      });\r\n\r\n      return {\r\n        ...state,\r\n        cartOpen: newState.length > 0,\r\n        cart: newState,\r\n      };\r\n\r\n    case UPDATE_CART_QUANTITY:\r\n      return {\r\n        ...state,\r\n        cartOpen: true,\r\n        cart: state.cart.map((product) => {\r\n          if (action._id === product._id) {\r\n            product.purchaseQuantity = action.purchaseQuantity;\r\n          }\r\n          return product;\r\n        }),\r\n      };\r\n\r\n    case CLEAR_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: false,\r\n        cart: [],\r\n      };\r\n\r\n    case TOGGLE_CART:\r\n      return {\r\n        ...state,\r\n        cartOpen: !state.cartOpen,\r\n      };\r\n    // if it's none of these actions, do not update state at all and keep the things the same!\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport function useProductReducer(initialState) {\r\n  return useReducer(reducer, initialState);\r\n}\r\n","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\nexport const ADD_TO_CART = 'ADD_TO_CART';\r\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\r\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\r\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\r\nexport const CLEAR_CART = 'CLEAR_CART';\r\nexport const TOGGLE_CART = 'TOGGLE_CART';\r\n","import React, { createContext, useContext } from 'react';\r\nimport { useProductReducer } from './reducers';\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer({\r\n        products: [],\r\n        cart: [],\r\n        cartOpen: false,\r\n        categories: [],\r\n        currentCategory: '',\r\n    });\r\n    // use this to confirm it works\r\n    console.log(state);\r\n    return <Provider value={[state, dispatch]} {...props}/>;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext);\r\n}\r\n\r\nexport { StoreProvider, useStoreContext };","export function pluralize(name, count) {\r\n  if (count === 1) {\r\n    return name;\r\n  }\r\n  return name + \"s\";\r\n}\r\n\r\nexport function idbPromise(storeName, method, object) {\r\n  return new Promise((resolve, reject) => {\r\n    // open connection  to the database `shop-shop` with the version of 1\r\n    const request = window.indexedDB.open(\"shop-shop\", 1);\r\n\r\n    // create variables to hold reference to the database, transaction (tx), and object store\r\n    let db, tx, store;\r\n\r\n    // if version has changed (or if this is the first time using the database), run this method and creeate the three object stores\r\n    request.onupgradeneeded = function (e) {\r\n      const db = request.result;\r\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\r\n      db.createObjectStore(\"products\", { keyPath: \"_id\" });\r\n      db.createObjectStore(\"categories\", { keyPath: \"_id\" });\r\n      db.createObjectStore(\"cart\", { keyPath: \"_id\" });\r\n    };\r\n\r\n    // handle any errors with connecting\r\n    request.onerror = function (e) {\r\n      console.log(\"There was an error\");\r\n    };\r\n    // on database open success\r\n    request.onsuccess = function(e) {\r\n      // save a reference of the database to the db variable\r\n      db = request.result;\r\n      // open a transaction to do whateever we pass into storeName (must match one of the object store names )\r\n    tx = db.transaction(storeName, 'readwrite');\r\n    // save a reference  to that object store\r\n    store = tx.objectStore(storeName);\r\n\r\n    // if there's any errors, let us know\r\n    db.onerror = function(e) {\r\n      console.log('error', e);\r\n    };\r\n\r\n    switch(method) {\r\n      case 'put':\r\n        store.put(object);\r\n        resolve(object);\r\n        break;\r\n      case 'get':\r\n        const all = store.getAll();\r\n        all.onsuccess = function() {\r\n          resolve(all.result);\r\n        };\r\n        break;\r\n        case 'delete':\r\n          store.delete(object._id)\r\n          break;\r\n          default:\r\n            console.log('No valid method');\r\n            break;\r\n    }\r\n\r\n    // when the transaction is complete, close the connection\r\n    tx.oncomplete = function() {\r\n      db.close();\r\n    }\r\n    }\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { pluralize } from \"../../utils/helpers\"\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\nfunction ProductItem(item) {\r\n\r\n  const [state, dispatch] = useStoreContext();\r\n  const { cart } = state;\r\n  const addToCart = () => {\r\n    // find the item in the cart with the matching id\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id);\r\n\r\n\r\n    // if there's a match, call Update with a new purchase  Quantity\r\n    if(itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n      });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item, purchaseQuantity: 1}\r\n      })\r\n\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n    quantity\r\n  } = item;\r\n\r\n  return (\r\n    <div className=\"card px-1 py-1\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\r\n        <span>${price}</span>\r\n      </div>\r\n      <button onClick={addToCart}>Add to cart</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      quantity\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          quantity\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n    query getCheckout($products: [ID]!) {\r\n      checkout(products: $products) {\r\n        session\r\n      }\r\n    }\r\n  \r\n  `;\r\n","import React, { useEffect } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport ProductItem from \"../ProductItem\";\r\nimport { QUERY_PRODUCTS } from \"../../utils/queries\";\r\nimport spinner from \"../../assets/spinner.gif\";\r\n\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { UPDATE_PRODUCTS } from \"../../utils/actions\";\r\n\r\nfunction ProductList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n     // if there's data to be stored\r\n    if (data) {\r\n      dispatch({\r\n        // let's store it in the global state object\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n       // but let's also take each product and save it to IndexedDB using the helper function \r\n       data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    } else if (!loading) {\r\n      // since we're offline, get all the data ffrom the products store \r\n      idbPromise('products', 'get').then((products) => {\r\n        // use retrieved data to set global state for offline browsing\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: products\r\n        });\r\n      });\r\n    }\r\n  }, [data, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      <h2>Our Products:</h2>\r\n      {state.products.length ? (\r\n        <div className=\"flex-row\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n              quantity={product.quantity}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You haven't added any products yet!</h3>\r\n      )}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;\r\n","import { useQuery } from '@apollo/client';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport React, { useEffect } from 'react';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { idbPromise } from '../../utils/helpers';\r\n\r\nfunction CategoryMenu() {\r\n\r\n  const [state, dispatch] = useStoreContext();\r\n  const { categories } = state;\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    \r\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\r\n    if(categoryData) {\r\n      // execute our dispatch funnction with our action object indicating the type of action and the data to set our state for categories\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories\r\n      });\r\n      categoryData.categories.forEach(category => {\r\n        idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      idbPromise('categories', 'get').then(categories => {\r\n        dispatch({\r\n          type: UPDATE_CATEGORIES,\r\n          categories: categories\r\n        });\r\n      });\r\n    }\r\n  }, [categoryData, dispatch]);\r\n\r\n  const handleClick = id => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Choose a Category:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from \"react\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\n\r\n\r\nconst CartItem = ({ item }) => {\r\n  const [, dispatch] = useStoreContext();\r\n\r\n  const removeFromCart = (item) => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: item._id,\r\n    });\r\n\r\n    idbPromise('cart', 'delete', { ...item });\r\n  };\r\n\r\n  const onChange = (e) => {\r\n    const value = e.target.value;\r\n  \r\n    if (value === '0') {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n\r\n      idbPromise('cart', 'delete', { ...item });\r\n    } else {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: item._id,\r\n        purchaseQuantity: parseInt(value)\r\n      });\r\n\r\n      idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-row\">\r\n      <div>\r\n        <img src={`/images/${item.image}`} alt=\"\" />\r\n      </div>\r\n      <div>\r\n        <div>\r\n          {item.name}, ${item.price}\r\n        </div>\r\n        <div>\r\n          <span>Qty:</span>\r\n          <input type=\"number\" placeholder=\"1\" value={item.purchaseQuantity} onChange={onChange}/>\r\n          <span role=\"img\" aria-label=\"trash\" onClick={() => removeFromCart(item)}>\r\n            🗑️\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CartItem;\r\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useEffect } from \"react\";\r\nimport CartItem from \"../CartItem\";\r\nimport Auth from \"../../utils/auth\";\r\nimport \"./style.css\";\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/helpers\";\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/client';\r\n\r\n\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise(\"cart\", \"get\");\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n// useeffect for Stripe checkout to get session id \r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n\r\n\r\n\r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      sum += item.price * item.purchaseQuantity;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n\r\n  function submitCheckout() {\r\n    const productIds = [];\r\n  \r\n    state.cart.forEach((item) => {\r\n      for (let i = 0; i < item.purchaseQuantity; i++) {\r\n        productIds.push(item._id);\r\n      }\r\n    });\r\n\r\n    getCheckout({\r\n      variables: { products: productIds }\r\n    });\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: ${calculateTotal()}</strong>\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span>\r\n          You haven't added anything to your cart yet!\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;\r\n","import React, { useState } from \"react\";\r\nimport ProductList from \"../components/ProductList\";\r\nimport CategoryMenu from \"../components/CategoryMenu\";\r\nimport Cart from '../components/Cart';\r\n\r\nconst Home = () => {\r\n\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <CategoryMenu  />\r\n      <ProductList />\r\n      <Cart/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { idbPromise } from \"../utils/helpers\";\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport spinner from \"../assets/spinner.gif\";\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\nimport Cart from \"../components/Cart\";\r\nimport {\r\n  REMOVE_FROM_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  ADD_TO_CART,\r\n  UPDATE_PRODUCTS,\r\n} from \"../utils/actions\";\r\n\r\nfunction Detail() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: id,\r\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n      });\r\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\r\n    idbPromise('cart', 'put', {\r\n      ...itemInCart,\r\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\r\n    });\r\n    } else {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...currentProduct, purchaseQuantity: 1 },\r\n      });\r\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\r\n    idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n    }\r\n  };\r\n\r\n  const removeFromCart = () => {\r\n    dispatch({\r\n      type: REMOVE_FROM_CART,\r\n      _id: currentProduct._id,\r\n    });\r\n\r\n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\r\n  idbPromise('cart', 'delete', { ...currentProduct });\r\n  };\r\n\r\n  const { id } = useParams();\r\n\r\n  const [currentProduct, setCurrentProduct] = useState({});\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  const { products, cart } = state;\r\n\r\n  useEffect(() => {\r\n    // already in gloabl store\r\n    if (products.length) {\r\n      setCurrentProduct(products.find((product) => product._id === id));\r\n    } else if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n\r\n      data.products.forEach((product) => {\r\n        idbPromise('products', 'put', product);\r\n      });\r\n    }\r\n    // get cache from idb\r\n    else if (!loading) {\r\n      idbPromise('products', 'get').then((indexedProducts) => {\r\n        dispatch({\r\n          type: UPDATE_PRODUCTS,\r\n          products: indexedProducts\r\n        });\r\n      });\r\n    }\r\n  }, [products, data, loading, dispatch, id]);\r\n  return (\r\n    <>\r\n      {currentProduct ? (\r\n        <div className=\"container my-1\">\r\n          <Link to=\"/\">← Back to Products</Link>\r\n\r\n          <h2>{currentProduct.name}</h2>\r\n\r\n          <p>{currentProduct.description}</p>\r\n\r\n          <p>\r\n            <strong>Price:</strong>${currentProduct.price}{\" \"}\r\n            <button onClick={addToCart}>Add to Cart</button>\r\n            <button\r\n              disabled={!cart.find((p) => p._id === currentProduct._id)}\r\n              onClick={removeFromCart}\r\n            >\r\n              Remove from Cart\r\n            </button>\r\n          </p>\r\n\r\n          <img\r\n            src={`/images/${currentProduct.image}`}\r\n            alt={currentProduct.name}\r\n          />\r\n        </div>\r\n      ) : null}\r\n      {loading ? <img src={spinner} alt=\"loading\" /> : null}\r\n      <Cart />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        category {\n          name\n        }\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser(\n    $firstName: String!\n    $lastName: String!\n    $email: String!\n    $password: String!\n  ) {\n    addUser(\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n      password: $password\n    ) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        firstName: formState.firstName,\n        lastName: formState.lastName,\n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Signup;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">← Back to Products</Link>\n\n        {user ? (\n          <>\n            <h2>\n              Order History for {user.firstName} {user.lastName}\n            </h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\n                </h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img alt={name} src={`/images/${image}`} />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n}\n\nexport default OrderHistory;\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/helpers';\r\n\r\nfunction Success() {\r\n  const [addOrder] = useMutation(ADD_ORDER);\r\n\r\n  useEffect(() => {\r\n    async function saveOrder() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      const products = cart.map((item) => item._id);\r\n\r\n      if (products.length) {\r\n        const { data } = await addOrder({ variables: { products } });\r\n        const productData = data.addOrder.products;\r\n\r\n        productData.forEach((item) => {\r\n          idbPromise('cart', 'delete', item);\r\n        });\r\n      }\r\n\r\n      setTimeout(() => {\r\n        window.location.assign('/');\r\n      }, 3000);\r\n    }\r\n\r\n    saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Success!</h1>\r\n        <h2>Thank you for your purchase!</h2>\r\n        <h2>You will now be redirected to the home page</h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { StoreProvider } from \"./utils/GlobalState\";\r\n\r\nimport Home from './pages/Home';\r\nimport Detail from './pages/Detail';\r\nimport NoMatch from './pages/NoMatch';\r\nimport Login from './pages/Login';\r\nimport Signup from './pages/Signup';\r\nimport Nav from './components/Nav';\r\nimport OrderHistory from './pages/OrderHistory';\r\nimport Success from './pages/success';\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n        <StoreProvider>\r\n\r\n          <Nav />\r\n          <Switch>\r\n            <Route exact path=\"/\" component={Home} />\r\n            <Route exact path=\"/login\" component={Login} />\r\n            <Route exact path=\"/signup\" component={Signup} />\r\n            <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n            <Route exact path=\"/products/:id\" component={Detail} />\r\n            <Route exact path=\"/success\" component={Success}/>\r\n            <Route component={NoMatch} />\r\n          </Switch>\r\n        </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}